// <auto-generated />
using System;
using MenuGenerator.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MenuGenerator.Models.Database.Migrations
{
    [DbContext(typeof(MenuGeneratorContext))]
    partial class MenuGeneratorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("AllergenEntityDishEntity", b =>
                {
                    b.Property<Guid>("AllergenListId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DishListId")
                        .HasColumnType("TEXT");

                    b.HasKey("AllergenListId", "DishListId");

                    b.HasIndex("DishListId");

                    b.ToTable("AllergenEntityDishEntity");
                });

            modelBuilder.Entity("DependsOnRuleEntityDishEntity", b =>
                {
                    b.Property<Guid>("DependsOnDishListId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DependsOnRuleEntityId")
                        .HasColumnType("TEXT");

                    b.HasKey("DependsOnDishListId", "DependsOnRuleEntityId");

                    b.HasIndex("DependsOnRuleEntityId");

                    b.ToTable("DependsOnRuleEntityDishEntity");
                });

            modelBuilder.Entity("DishEntityMenuEntity", b =>
                {
                    b.Property<Guid>("DishListId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MenuListDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DishListId", "MenuListDate");

                    b.HasIndex("MenuListDate");

                    b.ToTable("DishEntityMenuEntity");
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.Allergen.AllergenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DisplayId")
                        .IsUnique();

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.Dish.DishEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IncludeInNewMenus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludesFirstSupplement")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludesSecondSupplement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.Menu.MenuEntity", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Date");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.OccurenceRule.OccurenceRuleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DishId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.ToTable("OccurenceRules");

                    b.HasDiscriminator<string>("RuleType").HasValue("OccurenceRuleEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.OccurenceRule.CanOccurAfterDays.CanOccurAfterDaysEntity", b =>
                {
                    b.HasBaseType("MenuGenerator.Models.Entities.OccurenceRule.OccurenceRuleEntity");

                    b.Property<int>("Days")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("CanOccurAfterDaysEntity");
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.OccurenceRule.DependsOn.DependsOnRuleEntity", b =>
                {
                    b.HasBaseType("MenuGenerator.Models.Entities.OccurenceRule.OccurenceRuleEntity");

                    b.HasDiscriminator().HasValue("DependsOnRuleEntity");
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.OccurenceRule.CanNotOccurWith.CanNotOccurWithEntity", b =>
                {
                    b.HasBaseType("MenuGenerator.Models.Entities.OccurenceRule.DependsOn.DependsOnRuleEntity");

                    b.HasDiscriminator().HasValue("CanNotOccurWithEntity");
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.OccurenceRule.CanOccurOnlyWith.CanOccurOnlyWithOneOfEntity", b =>
                {
                    b.HasBaseType("MenuGenerator.Models.Entities.OccurenceRule.DependsOn.DependsOnRuleEntity");

                    b.HasDiscriminator().HasValue("CanOccurOnlyWithOneOfEntity");
                });

            modelBuilder.Entity("AllergenEntityDishEntity", b =>
                {
                    b.HasOne("MenuGenerator.Models.Entities.Allergen.AllergenEntity", null)
                        .WithMany()
                        .HasForeignKey("AllergenListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuGenerator.Models.Entities.Dish.DishEntity", null)
                        .WithMany()
                        .HasForeignKey("DishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DependsOnRuleEntityDishEntity", b =>
                {
                    b.HasOne("MenuGenerator.Models.Entities.Dish.DishEntity", null)
                        .WithMany()
                        .HasForeignKey("DependsOnDishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuGenerator.Models.Entities.OccurenceRule.DependsOn.DependsOnRuleEntity", null)
                        .WithMany()
                        .HasForeignKey("DependsOnRuleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DishEntityMenuEntity", b =>
                {
                    b.HasOne("MenuGenerator.Models.Entities.Dish.DishEntity", null)
                        .WithMany()
                        .HasForeignKey("DishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuGenerator.Models.Entities.Menu.MenuEntity", null)
                        .WithMany()
                        .HasForeignKey("MenuListDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.OccurenceRule.OccurenceRuleEntity", b =>
                {
                    b.HasOne("MenuGenerator.Models.Entities.Dish.DishEntity", "Dish")
                        .WithMany("OccurenceRuleList")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("MenuGenerator.Models.Entities.Dish.DishEntity", b =>
                {
                    b.Navigation("OccurenceRuleList");
                });
#pragma warning restore 612, 618
        }
    }
}
